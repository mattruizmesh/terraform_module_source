import { Construct } from "constructs";
import { TerraformVariable, Token, TerraformStack, App } from "cdktf";
import { AzurermProvider } from "@cdktf/provider-azurerm/lib/provider";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { StorageAccount } from "@cdktf/provider-azurerm/lib/storage-account";

class MyStack extends TerraformStack {
  constructor(scope: Construct, id: string) {
    super(scope, id);

    // cdktf synth wants the Azurerm provider block to be defined in the stack
    new AzurermProvider(this, "azurerm", {
      features: [{}],
    });

    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
You can read more about this at https://cdk.tf/variables*/
    const location = new TerraformVariable(this, "location", {});
    const resourceGroupName = new TerraformVariable(
      this,
      "resource_group_name",
      {}
    );
    const storageAccountName = new TerraformVariable(
      this,
      "storage_account_name",
      {}
    );
    const storageAccountReplicationType = new TerraformVariable(
      this,
      "storage_account_replication_type",
      {}
    );
    const storageAccountTier = new TerraformVariable(
      this,
      "storage_account_tier",
      {}
    );
    const tags = new TerraformVariable(this, "tags", {});
    new StorageAccount(this, "stg", {
      accountReplicationType: storageAccountReplicationType.stringValue,
      accountTier: storageAccountTier.stringValue,
      location: location.stringValue,
      name: storageAccountName.stringValue,
      resourceGroupName: resourceGroupName.stringValue,
      tags: Token.asStringMap(tags.value),
    });
  }
}

const app = new App();
new MyStack(app, "storage_cdktf");
app.synth();
